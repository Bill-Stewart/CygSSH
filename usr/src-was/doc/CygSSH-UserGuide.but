\# CygSSH.but
\# Written by Bill Stewart (bstewart at iname.com)
\# CygSSH User Guide - Halibut source file

\# ----------------------------------------------------------------------------
\# MACROS
\# ----------------------------------------------------------------------------

\define{version} 9.7.0

\define{rightarrow} \u2192

\define{copyright} \u00A9

\# ----------------------------------------------------------------------------
\# CONFIGURATION
\# ----------------------------------------------------------------------------

\cfg{paper-page-width}{612}
\cfg{paper-page-height}{792}

\cfg{paper-title-font-size}{24}
\cfg{paper-title-fonts}{Helvetica-Bold}{Helvetica-BoldOblique}{Courier-Bold}

\cfg{paper-base-font-size}{10}
\cfg{paper-pagenum-font-size}{10}
\cfg{paper-base-fonts}{Times-Roman}{Times-Italic}{Times-Bold}

\cfg{paper-code-font-size}{9}
\cfg{paper-code-fonts}{Courier-Bold}{Courier-Oblique}{Courier}

\cfg{paper-chapter-fonts}{Helvetica-Bold}{Helvetica-BoldOblique}{Courier-Bold}
\cfg{paper-chapter-font-size}{18}

\cfg{paper-section-fonts}{0}{Helvetica-Bold}{Helvetica-BoldOblique}{Courier-Bold}
\cfg{paper-section-font-size}{0}{16}

\cfg{paper-section-fonts}{1}{Helvetica-Bold}{Helvetica-BoldOblique}{Courier-Bold}
\cfg{paper-section-font-size}{1}{14}

\cfg{paper-section-fonts}{2}{Helvetica-Bold}{Helvetica-BoldOblique}{Courier-Bold}
\cfg{paper-section-font-size}{2}{13}

\# ----------------------------------------------------------------------------
\# TITLE
\# ----------------------------------------------------------------------------

\title CygSSH User Guide

\copyright Copyright 2020-2024 by Bill Stewart

\versionid \version

CygSSH is a convenient packaging of the Cygwin version of OpenSSH that provides a simple way to install and use the Cygwin version of OpenSSH on Windows.

This software is covered by the license agreements listed in \k{licenses}.

\# ----------------------------------------------------------------------------
\# CHAPTER
\# ----------------------------------------------------------------------------

\C{installer} Installing the Package

The \i{system requirements} are the following:

\b Windows 8.1 64-bit or Windows Server 2012 R2 or later

The installer performs the following tasks:

\b Creates the needed directories and copies the files

\b Configures file and directory access control lists (ACLs)

\b Configures the \c{fstab} file to disable Cygwin file system permission changes (see \k{cygwinfstabfile})

The installer also performs the following tasks if the setup type is \s{full} (see \k{setuptype}):

\b Creates the OpenSSH server host keys (see \k{hostkeys})

\b \I{sshd account}Creates the local \c{sshd} account (see \k{chrootdirectory})

\b Creates the local access group and updates the \i\c{sshd_config} file (see \k{localaccessgroup})

\b Adds a rule to the Windows \i{firewall} to allow communication to the OpenSSH server service

\b If the \s{startservice} task is selected (see \k{setuptasks}), starts the OpenSSH server service

Regardless of the setup type, the installer then performs any other tasks selected on the \s{Select Additional Tasks} page (see \k{setuptasks}).

\I{Inno Setup}The installer package is built using the \W{http://www.jrsoftware.org/isinfo.php}{Inno Setup} installer, so it supports all of Inno Setup's \W{http://www.jrsoftware.org/ishelp/index.php?topic=setupcmdline}{command line parameters}.

Example installation command:

\c CygSSH-Setup-version /SILENT /CLOSEAPPLICATIONS /SUPPRESSMSGBOXES
\e              iiiiiii

Replace \e{version} with the version (e.g., \s{9.7.0}).

\I{/CLOSEAPPLICATIONS parameter}\I{/SILENT parameter}\I{/SUPPRESSMSGBOXES parameter}\I{install, silent}\I{silent install}The above command installs the package silently (i.e., without user interaction). The \c{/CLOSEAPPLICATIONS} parameter automatically stops running services and closes programs so that the installer can reinstall or upgrade the files. Stopped services will be automatically restarted after the installation completes. The \c{/SUPPRESSMSGBOXES} parameter suppresses message dialog boxes that would normally appear in an interactive installation.

If you want to prevent the installer from displaying its progress window during a silent install, use \c{/VERYSILENT} instead of \c{/SILENT}.

\I{non-administrative install mode}\I{/CURRENTUSER parameter}The installer also supports non-administrative install mode, which installs only the client files for the current user (does not require administrator privileges). To run in non-administrative install mode, use the \c{/CURRENTUSER} parameter on the command line.

\I{/FORCEUNINSTALL parameter}You can also force the installer to uninstall the installed version before proceeding with installation; to do this, specify the \c{/FORCEUNINSTALL} parameter on the command line. When you use this parameter, the installer detects if the package is already installed and automatically uninstalls it before proceeding with the installation.

The following sections describe the pages of the installer wizard.

\H{} License Agreement

The \s{License Agreement} page of the installer wizard lists the license agreements used by the various software components. Installing the software implies an acceptance of all license agreements (see \k{licenses}).

\H{} Information

The \s{Information} page of the installer wizard lists release notes for the current version of the package.

\H{installpath} Select Destination Location

\I{/CURRENTUSER parameter}The \s{Select Destination Location} page of the installer wizard allows you to specify the directory path where the package will be installed. This is \c{C:\\Program Files\\CygSSH} by default (if \c{C:} is the system drive). If you started the installer using the \c{/CURRENTUSER} parameter, the default path will be like \c{C:\\Users\\}\e{username}\c{\\AppData\\Local\\Programs\\CygSSH} (i.e., install only for the current user).

You can specify a different destination path on the installer's command line by using the \c{/DIR="}\e{installpath}\c{"} command line parameter (where \e{installpath} is the directory path name).

\I{installpath}Throughout this documentation, the installation directory is referred to as \e{installpath}.

Note that this page doesn't appear if you are reinstalling or upgrading.

\H{setuptype} Select Setup Type

\I{installer setup type}\I{setup type (installer)}The \s{Select Setup Type} page of the installer wizard allows you to choose the setup type. The setup types are as follows:

\b \s{full} - \I{full installation}\I{installation, full}Full installation (server and client files)

\b \I{client installation}\I{installation, client}\s{client} - Client installation (client files only)

You can specify the setup type on the command line using the \c{/TYPE="}\e{type}\c{"} command line parameter (where \e{type} is either \s{full} or \s{client}). The default setup type is \s{full}, so the only reason to use the \c{/TYPE} command line parameter is if you want to specify \c{/TYPE="client"} as the default (typically for a silent install).

Note that this page doesn't appear under the following conditions:

\b \I{/CURRENTUSER parameter}If you specified \c{/CURRENTUSER} on the installer's command line, because \c{/CURRENTUSER} implies the \s{client} setup type

\b If you previously installed using the \s{full} setup type, because selecting the \s{client} setup type does not remove the server files

\H{setupfolder} Select Start Menu Folder

\I{Start menu}The \s{Select Start Menu Folder} page of the installer wizard allows you to specify the name of the Start menu folder where it will install application shortcut \i{icons}.

\I{shortcuts}You can specify the folder name on the command line using the \c{/GROUP="}\e{name}\c{"} command line parameter (where \e{name} is the folder name). Alternatively, you can specify \c{/NOICONS} to prevent creation of any Start menu shortcuts.

Note that this page doesn't appear if you are reinstalling or upgrading.

\H{setuptasks} Select Additional Tasks

\I{additional tasks (installer)}\I{installer additional taks}The \s{Select Additional Tasks} page of the installer wizard allows you to select additional tasks the installer should perform. The additional tasks are as follows:

\b \I{startservice installer task}\I{service, start}\s{startservice} - Corresponds to the \s{Start OpenSSH server service} check box. Starts the OpenSSH server service. This task is not applicable if the setup type is \s{client} (see \k{setuptype}). This task is selected by default.

\b \I{modifypath installer task}\I{system Path}\I{user Path}\I{/CURRENTUSER parameter}\s{modifypath} - Corresponds to the \s{Add to system Path} (or \s{Add to user Path}) check box. Adds the \e{installpath}\c{\\bin} directory to the system or user Path environment variable if it does not already exist. This task is selected by default. (This task does not appear if \e{installpath}\c{\\bin} is already in the system or user Path.)

\b \s{resetconfig} - Restores the OpenSSH configuration files (\i\c{ssh_config} and/or \i\c{sshd_config}) to default values. Use this task with caution if you have made any customizations to the \c{etc\\ssh_config} and/or \c{etc\\sshd_config} files. When you select this task, the installer renames the existing \i\c{ssh_config} and/or \i\c{sshd_config} files with \s{-}\e{timestamp} appended (where \e{timestamp} is the current year, month, day, hour, minute, and second) before installing default copies of the configuration file(s). This task is not selected by default.

You can specify one or more of the additional tasks on the command line using the \c{/TASKS="}\e{task}[\c{,}\e{task}[...]]\c{"} command line parameter (where \e{task} is one or more of the above task names, separated by \c{,} characters).

For an interactive (i.e., not silent) installation, the \c{/TASKS} parameter specifies which tasks are selected by default; you can change the defaults on the page as you install.

For a silent installation, the \c{/TASKS} parameter dictates the list of tasks the installer will perform. For example, if you specify \c{/TASKS="startservice" /SILENT} on the installer's command line, the installer will \s{only} perform the \c{startservice} task.

To indicate \q{no tasks}, specify \c{/TASKS=""} on the installer's command line.

Note that if you do not select the \c{modifypath} task when you install, you will need to do one of the following before running commands:

\b Change to the \e{installpath}\c{\\bin} directory before running the command

\b Specify the path to the command when you want to run it

\# ----------------------------------------------------------------------------
\# CHAPTER
\# ----------------------------------------------------------------------------

\C{} Reinstalling, Upgrading or Downgrading

This chapter describes how to reinstall, upgrade, and downgrade the package.

\H{reinstall} Reinstalling or Upgrading

Reinstalling or upgrading the package is as simple as running the installer:

\b If the installer is the same version as the installed version, it will reinstall the installed version.

\b If the installer is a newer version than the installed version, it will upgrade the installed version.

A reinstall or upgrade cannot proceed if the OpenSSH server service or any of the programs in the package are currently running. If any are running, the installer will prompt for permission to stop running services and close any programs.

\I{/CLOSEAPPLICATIONS parameter}\I{/SILENT parameter}You can prevent the prompt from appearing by specifying the \c{/CLOSEAPPLICATIONS} parameter on the installer's command line. This is particularly useful when using the \c{/SILENT} parameter (see \k{installer}).

\H{downgrade} Downgrading

In order to perform a downgrade, you can do one of the following:

\b Uninstall the installed version (see \k{uninstall}) and install the older version, or

\b Use the \c{/FORCEUNINSTALL} parameter (see \k{installer}).

If you are installing an older version of the package that doesn't support the \c{/FORCEUNINSTALL} parameter, you will need to uninstall and reinstall.

\# ----------------------------------------------------------------------------
\# CHAPTER
\# ----------------------------------------------------------------------------

\C{uninstall} Uninstalling the Package

To \i{uninstall} the package, use the standard means of accessing installed applications on your version of Windows (e.g., the \s{Programs and Features} applet in the Control Panel), and uninstall it from there.

\I{silent uninstall}If you want to uninstall silently (without user interaction), do the following:

\n Determine the filename of the uninstall program. The file is in \e{installpath} and is named like \c{unins}\e{nnn}\c{.exe} (where \e{nnn} is 3 digits - normally \c{000}).

\n Run the executable with the \c{/SILENT} command line parameter.

For example, if the uninstaller executable is \c{C:\\Program Files\\CygSSH\\unins000.exe}, the command line to uninstall silently is the following:

\c "C:\Program Files\CygSSH\unins000.exe" /SILENT

You can also replace \c{/SILENT} with \c{/VERYSILENT} to prevent the uninstaller from displaying its progress window.

The uninstall program does not remove the following items:

\b Configuration files in the \c{etc} directory

\b The \c{lastlog} file in the \c{var\\log} directory

\b The \s{users\\SYSTEM\\.ssh} directory or its contents

\b Any other user created files

\b \I{sshd account}The local \c{sshd} user account

\# ----------------------------------------------------------------------------
\# CHAPTER
\# ----------------------------------------------------------------------------

\C{} Client Authentication

This chapter describes how to authenticate to an OpenSSH server using SSH client software.

\H{cygwinsshcommands} Using the SSH Client Commands

The CygSSH package provides several SSH client commands:

\b \I{scp command}The \s{scp} command copies files to an SSH server

\b \I{ssh command}The \s{ssh} command establishes an \i{interactive shell} session with an SSH server

\b \I{sftp command}The \s{sftp} command establishes a file transfer session with an SSH server

\I{mintty}\s{Note:} It's recommended to run the \s{ssh} and \s{sftp} SSH client commands using the \s{mintty} command (e.g., \s{mintty ssh} rather than just \s{ssh}). If you run these SSH client commands without the \s{mintty} command, line wrapping and other features may not work as expected.

Example 1:

\c mintty sftp COMPUTER1+localuser@computer1

This command establishes a file transfer session to \c{computer1} using the account \c{COMPUTER1+localuser}.

Example 2:

\c mintty ssh -i /cygdrive/c/Users/KenDyer/.ssh/kenprivkey KenDyer@computer2

This command establishes an interactive shell session to \c{computer2} using the \c{KenDyer} account using public key authentication (see \k{publickeyauth}), using the file \c{C:\\Users\\KenDyer\\.ssh\\kenprivkey} as the private key.

Example 3:

\c scp "/cygdrive/C/Program\ Files/CygSSH/etc/sshd_config"
\c   "bkpsvc@server1:/cygdrive/C/Program\ Files\CygSSH\etc"

(All on one line) This command copies the \c{sshd_config} file from the current computer to a remote computer.

When using the Cygwin SSH client commands, note that path names must be in POSIX format, using the \c{\\} character to \q{escape} spaces where necessary (see \k{posixpathnames}).

\I{.ssh directory}If you haven't connected to an SSH server before, the command will prompt you to store the server's \i{host key fingerprint} (see \k{hostkeys}) in the \i\c{known_hosts} file. The default path of the \c{known_hosts} file is in the \c{.ssh} directory in the user's home directory (see \k{cygwinhome}).

You can also use the \s{rsync} command over an SSH connection to transfer files more efficiently (see \k{usingrsync}).

See \k{documentationlinks} for links to the documentation for the \s{ssh}, \s{scp}, \s{sftp}, and \s{rsync} commands.

\H{sshclients} Using Other SSH Clients

See the documentation for the SSH client for more information on how to use it to connect to an SSH server.

Popular Windows SSH clients include the following:

\I{PuTTY}\s{PuTTY} - \W{https://www.chiark.greenend.org.uk/~sgtatham/}{https://www.chiark.greenend.org.uk/~sgtatham/}

\I{WinSCP}\s{WinSCP} - \W{https://winscp.net/}{https://winscp.net/}

\# ----------------------------------------------------------------------------
\# CHAPTER
\# ----------------------------------------------------------------------------

\C{} Server Authentication

This chapter describes how to configure the OpenSSH server service to permit logons using password authentication (see \k{usingpasswordauth}) or public key authentication (see \k{usingpublickeyauth}).

\H{localaccessgroup} Using the Local Access Group

\I{local access group}\I{access group, local}\I{SSH Users group}By default, the OpenSSH server service only allows accounts that are members of the \c{SSH\_Users} local group to log on. The installer (see \k{installer}) will create the \c{SSH\_Users} local group if it does not exist. This local group is referred to as the \e{local access group}.

The local access group is empty by default, which means you must explicitly add accounts to the local access group to allow logon via SSH.

If the computer is an Active Directory domain member, nested domain groups are supported. For example, you can add a domain group as a member of the \c{SSH\_Users} local group, and all members of the domain group will be granted access to log on using SSH.

If you have an \i{Active Directory} domain, you can manage the membership of the \c{SSH\_Users} local group using a \i{Group Policy} Object (GPO).

\I{AllowGroups setting}The installer (see \k{installer}) automatically updates the \i\c{sshd_config} file at installation time with the following line:

\c AllowGroups "[computername+]SSH Users"
\e               iiiiiiiiiiii

If the computer is a domain member, the installer adds the computer name and \c{+} prefix (see \k{cygwinaccountnames}). Otherwise, the computer name and \c{+} prefix are not used.

If the computer name changes, or if the computer is removed as a domain member, you will need to manually edit the \c{sshd_config} file as follows:

\b If the computer name changes, update the computer name on the \c{AllowGroups} line of the file.

\b If the computer is removed as a domain member, remove the computer name and \c{+} character on the \c{AllowGroups} line.

Once complete, save the \c{sshd_config} file and restart the OpenSSH server service.

\H{usingpasswordauth} Using Password Authentication
\I{using password authentication}\I{password authentication, using}

Once an account is a member of the local access group on the OpenSSH server (see \k{localaccessgroup}), that account can log on using an SSH client using the account's password. No further configuration is required.

The account name must use Cygwin format (see \k{cygwinaccountnames}).

\H{usingpublickeyauth} Using Public Key Authentication
\I{using public key authentication}\I{public key authentication, using}

\e{Public key authentication} is a means of authenticating an SSH logon without needing the account's password (see \k{publickeyauth}).

To authenticate an account using a public key instead of a password, you must first create a key pair (see \k{createkeypair}).

Once you have a key pair, you will need to complete all of the following configuration steps to enable public key authentication for the account:

\b Ensure the account is a member of the local access group (see \k{localaccessgroup})

\b Create the directories on the server (see \k{createaccountdirs})

\b Grant the account permission to the directories (see \k{icacls})

\b Add the account's public key to the \c{authorized_keys} file (see \k{addpublickey})

\S1{createaccountdirs} Create the Directories on the Server

\I{.ssh directory}To allow an account to authenticate using a public key (see \k{usingpublickeyauth}), you must create a directory named for the account in the \e{installpath}\c{\\users} directory, and a \c{.ssh} directory within that directory.

This section also applies to setting up an SFTP-only account (see \k{sftponly}).

The account name must use Cygwin format (see \k{cygwinaccountnames}).

For example, suppose the current computer is a domain member, and you want to allow the \c{KenDyer} account in the computer's domain to authenticate.

In this example you would create the following directories on the server:

\b \e{installpath}\c{\\users\\KenDyer}

\b \e{installpath}\c{\\users\\KenDyer\\.ssh}

\S1{icacls} Grant the Account Permission to the Directories

\I{Access Control List}To allow an account to authenticate using a public key (see \k{usingpublickeyauth}), you must update the directory's access control list (ACL) to grant the account at least read (\s{RX}) access to the directory and its subdirectories.

This section also applies to setting up an SFTP-only account (see \k{sftponly}).

\I{icacls}You can use the \s{icacls} command to grant the \i{permissions}.

First, open an elevated PowerShell console (i.e., right-click the PowerShell icon and choose \c{Run as administrator}).

Run a command like the following:

\c icacls "installpath\users\cygwinaccountname"
\e         iiiiiiiiiii       iiiiiiiiiiiiiiiii
\c   /grant "windowsaccountname:(CI)(OI)access"
\e           iiiiiiiiiiiiiiiiii         iiiiii

(All on one line)

Replace \e{cygwinaccountname} with the Cygwin account name (see \k{cygwinaccountnames}), replace \e{windowsaccountname} with the Windows account name, and replace \e{access} with either \s{M} for modify access or \s{RX} for read-only access.

For example, suppose the current computer is a member of the \c{FABRIKAM} domain and you are setting the permissions for the \c{KenDyer} account in that domain. The command to grant modify access would be as follows:

\c icacls "C:\Program Files\CygSSH\users\KenDyer"
\c   /grant "FABRIKAM\KenDyer:(CI)(OI)M"

(All on one line)

If you want to grant read-only access instead:

\c icacls "C:\Program Files\CygSSH\users\KenDyer"
\c   /grant "FABRIKAM\KenDyer:(CI)(OI)RX"

(All on one line)

\S1{addpublickey} Add the Account's Public Key to the \c{authorized_keys} File

\I{authorized_keys file}To allow an account to authenticate using a public key (see \k{usingpublickeyauth}), you must add the account's public key to the \c{authorized_keys} file.

\I{.ssh directory}The \c{authorized_keys} file is a text file in the account's \c{.ssh} directory that contains one line for each public key for the account. (The \W{https://man.openbsd.org/sshd.8#AUTHORIZED_KEYS_FILE_FORMAT}{OpenSSH documentation} describes the \c{authorized_keys} file format.)

If you use the \s{New\-SSHKey.ps1} script to generate a key pair (see \k{newsshkey}), you can use the generated public key (\c{.pub}) file as the \c{authorized_keys} file for the account.

If you use \s{PuTTYgen} to generate a key pair (see \k{puttygen}), you can use the text box labeled \s{Public key for pasting into OpenSSH authorized_keys file} as the content of the \c{authorized_keys} file. If you have a \c{.ppk} file, open it in \s{PuTTYgen}. It will put the public key in the text box, and you can copy it from there (make sure there are no line breaks).

For example, suppose the current computer is a member of the \c{FABRIKAM} domain, and you want to allow the \c{KenDyer} account in that domain to authenticate.

In this example, the file \e{installpath}\c{\\users\\KenDyer\\.ssh\\authorized_keys} would contain the public key(s) used to authenticate the \c{KenDyer} account.

\H{sftponly} Configuring an SFTP-Only Account

This section describes how to configure an \i{SFTP-only} account (i.e., the account can only connect to the OpenSSH server using a file transfer client such as \s{sftp} or \s{WinSCP}).

To configure an SFTP-only account, first create the directories for it (see \k{createaccountdirs}) and set the permissions (see \k{icacls}).

Next, create an \c{sftp} directory inside the account's directory.

\I{AllowTcpForwarding setting}\I{ChrootDirectory setting}\I{ForceCommand setting}Next, add lines like the following to the end of the \i\c{sshd_config} file:

\c Match User accountname
\e            iiiiiiiiiii
\c         X11Forwarding no
\c         AllowTcpForwarding no
\c         PermitTTY no
\c         ChrootDirectory /users/%u/sftp
\c         ForceCommand internal-sftp

Replace \e{accountname} with the account's Cygwin account name (see \k{cygwinaccountnames}).

The \c{ChrootDirectory} setting is not a true security control on Windows and is used only to limit the file system view on SFTP-only accounts (see \k{chrootdirectory}).

Once complete, save the \c{sshd_config} file and restart the OpenSSH server service.

\I{cygdrive directory}\I{dev directory}\s{Note:} You can't prevent the \c{cygdrive} and \c{dev} directories from appearing on the client side of the SFTP connection, but they don't cause any problems, either.

Example configuration:

Suppose the current computer is a domain member named \c{COMPUTER1}, and local account \c{sftponly} will be an SFTP-only account.

In this example, first create the following directories on the OpenSSH server:

\b \e{installpath}\c{\\users\\COMPUTER1+sftponly}

\b \e{installpath}\c{\\users\\COMPUTER1+sftponly\\sftp}

Next, grant the \c{sftponly} account at least read (\s{RX}) access to the \e{installpath}\c{\\users\\COMPUTER1+sftponly} directory and its subdirectories.

\I{Match User setting}Then, add the following lines to the end of the \c{sshd_config} file:

\c Match User COMPUTER1+sftponly
\c         X11Forwarding no
\c         AllowTcpForwarding no
\c         PermitTTY no
\c         ChrootDirectory /users/%u/sftp
\c         ForceCommand internal-sftp

\I{AuthenticationMethods}If the account will authenticate using a public key instead of a password (see \k{usingpublickeyauth}), add the \c{AuthenticationMethods publickey} setting; e.g.:

\c Match User COMPUTER1+sftponly
\c         AuthenticationMethods publickey
\c         X11Forwarding no
\c         AllowTcpForwarding no
\c         PermitTTY no
\c         ChrootDirectory /users/%u/sftp
\c         ForceCommand internal-sftp

(You must also add the \c{authorized_keys} file to the account's \c{.ssh} directory, as described in \k{addpublickey}.)

Once complete, save the \c{sshd_config} file and restart the OpenSSH server service.

\# ----------------------------------------------------------------------------
\# CHAPTER
\# ----------------------------------------------------------------------------

\C{} Public Key Cryptography
\I{public key cryptography}\I{cryptography, public key}\I{key pairs}

\e{Public key cryptography}, sometimes also called \e{asymmetric cryptography}, is an encryption technique that uses two cryptographically related signatures--a \e{public key} and a \e{private key}. (The public key and private key are typically referred to as a \e{key pair}.) The public key is used to encrypt, and the private key is used to decrypt. It is not computationally feasible to generate a private key based on a public key.

OpenSSH uses public key cryptography to ensure the communication between an SSH client and the OpenSSH server are encrypted.

\H{hostkeys} Host Keys

A \e{host key} is a cryptographic signature that uniquely identifies an OpenSSH server to SSH clients.

The installer (see \k{installer}) automatically creates the necessary host key files at installation time.

The files containing the \i{host keys} are stored in \e{installpath}\c{\\etc} and are named using the format \c{ssh_host_}\e{keytype}\c{_key}[\c{.pub}], where \e{keytype} is \s{ecdsa}, \s{ed25519}, or \s{rsa}. The \c{.pub} suffix indicates the public key. Each key type represents an encryption algorithm supported by OpenSSH.

For example, the file \c{ssh_host_ed25519_key} contains the private host key for the ED25519 encryption algorithm, and the file \c{ssh_host_ed25519_key.pub} contains its associated public key.

The private key files are configured with restricted access control lists (ACLs) to prevent unauthorized access (\s{SYSTEM:F} and \s{Administrators:F} only).

SSH clients can identify an SSH server by its unique \I{host key fingerprint}\e{host key fingerprint}. An SSH server's host key fingerprints are unique for each encryption algorithm it supports. When an SSH client connects to an SSH server for the first time using a particular encryption algorithm, the default behavior is for the SSH client to display the server's host key fingerprint for validation. 

SSH clients can store an SSH server's host key fingerprint for later comparison. If the host key fingerprint for a particular algorithm is different the next time the client connects, it may indicate the server has been compromised. Host keys fingerprints are a mechanism to validate the identity of the server to which you're connecting.

The \I{Get-SSHHostKeyFingerprint.ps1}\s{Get\-SSHHostKeyFingerprint.ps1} script displays host key fingerprints for SSH servers. You can use this script on an SSH server to display the server's host key fingerprint(s) in either md5 or sha256 format.

The Cygwin SSH client commands (see \k{cygwinsshcommands}) store known host keys in the \i\c{known_hosts} file in the current user's home directory (see \k{cygwinhome}).

\H{publickeyauth} Public Key Authentication
\I{public key authentication}\I{authentication, public key}

\e{Public key authentication} is a means of authenticating an SSH logon without needing the account's password.

To use \i{public key} authentication to authenticate an account in OpenSSH, you will need to create a key pair. The \i{private key} is used on the client side of the SSH connection, and the public key is used on the server side.

The account name must use Cygwin format (see \k{cygwinaccountnames}).

\S1{createkeypair} Creating a Key Pair
\I{key pairs}

This section describes different ways to create a key pair.

\S2{newsshkey} Creating a Key Pair Using the \s{New\-SSHKey.ps1} Script

\I{New-SSHKey.ps1}\I{ssh-keygen command}The \s{New\-SSHKey.ps1} script is a wrapper for the \s{ssh\-keygen} command. Using the script is straightforward: Open a PowerShell command window, run the script, it will prompt for the information it needs:

\n It will prompt you to enter the name of the private key file. The default path is the \c{.ssh} directory in the current user's home directory (see \k{cygwinhome}). Press \c{Enter} without entering anything to use the default file name or enter a new file name.

\n It will prompt you to enter a passphrase. If you specify a passphrase, you must enter it every time you want to use the key.

\n It will prompt you to enter a comment. The comment is intended to help you identify the key. Press \c{Enter} without entering anything to use the default comment, or enter a new comment.

Sample command output follows:

\c PS C:\Users\accountname> New-SSHKey
\e             iiiiiiiiiii
\c Key type: ed25519
\c Enter file in which to save the key (C:\Users\accountname\.ssh\id_ed25519):
\e                                               iiiiiiiiiii
\c Enter passphrase (leave empty for no passphrase):
\c Confirm passphrase (leave empty for no passphrase):
\c Comment (accountname@hostname): My SSH key
\e          iiiiiiiiiii iiiiiiii
\c Generating public/private ed25519 key pair.
\c Your identification has been saved in /cygdrive/c/Users/accountname/.ssh/id_ed25519.
\e                                                         iiiiiiiiiii
\c Your public key has been saved in /cygdrive/c/Users/accountname/.ssh/id_ed25519.pub.
\e                                                     iiiiiiiiiii
\c The key fingerprint is:
\c SHA256:w5UB4i5qymXdQX/7ErHgbglow77s6Q6h/kaN0iavKbA My SSH key
\c The key's randomart image is:
\c +--[ED25519 256]--+
\c |  E...+o+.=o.    |
\c | . oo o+ =.=o    |
\c |. =.o*  . ...    |
\c | o Bo .. =       |
\c |  = + . S        |
\c | = . = o o       |
\c |o o   = .        |
\c |.  . +.+         |
\c |    o.o..        |
\c +----[SHA256]-----+
\c Restricted permissions on file 'C:\Users\accountname\.ssh\id_ed25519'.
\e                                          iiiiiiiiiii

\I{.pub file}The \s{New\-SSHKey.ps1} script will attempt to restrict the permissions on the private key file to protect it from unauthorized access, but it may not be able to do this if the private key file is saved in a location where you don't have sufficient permissions to change the file's access control list (ACL). It's strongly recommended to store the private key in a location where you have permission to change the file's ACL so it will be protected from unauthorized access.

The file paths output by the \s{ssh\-keygen} command are in POSIX format (see \k{posixpathnames}).

\S2{puttygen} Create a Key Pair Using PuTTYgen

To create a key pair using \W{https://www.chiark.greenend.org.uk/~sgtatham/putty/}{\s{PuTTYgen}}, do the following:

\n \I{PuTTYgen}Open the \s{PuTTYgen} program.

\n At the bottom of the \s{PuTTYgen} window, select \s{ED25519} as the type of key to generate.

\n Click the \c{Generate} button.

\n Move the mouse in the \s{PuTTYgen} window to generate randomness.

\n The text box near the top of the \s{PuTTYgen} window (labeled \s{Public key for pasting into OpenSSH authorized_keys file}) contains the public key for use on the OpenSSH server. (The line of text in this text box corresponds to the \c{.pub} file generated using the \s{New\-SSHKey.ps1} script.)

\n You can specify a comment and/or a passphrase in the corresponding text boxes.

\n \I{.ppk file}Click the \c{Save} button to save the private key in PuTTY (\c{.ppk}) format.

It's strongly recommended to store the private key file in a location with a restricted access control list (ACL), particularly if the private key is not protected with a passphrase.

\S1{editprivatekey} Updating a Private Key
\I{Edit-SSHKey.ps1}\I{key passphrase}\I{passphrase, key}

You can use the \s{Edit\-SSHKey.ps1} script to update the passphrase or comment of a private key file. The command syntax is as follows:

\c Edit-SSHKey "filename" -Passphrase
\e              iiiiiiii

or:

\c Edit-SSHKey "filename" -Comment
\e              iiiiiiii

Replace \e{filename} with the name of the private key file.

The script will prompt you to enter a new passphrase or comment.

\I{comment, key}\I{key comment}If you specify \c{\-Comment}, the script will create a replacement public key file with a new comment (same filename but with \c{.pub} appended).

Hint: If you lose the public key file associated with a private key file, simply run \s{Edit\-SSHKey.ps1} with the \c{\-Comment} parameter. Enter an updated comment, and a new public key file will be created (same filename as private key, but with \c{.pub} appended).

\# ----------------------------------------------------------------------------
\# CHAPTER
\# ----------------------------------------------------------------------------

\C{cygwin} About Cygwin

\I{Cygwin}\W{https://www.cygwin.com/}{Cygwin} is a set of Windows DLLs (dynamically linked libraries) that provides substantial \i{POSIX}-compatible API (application programming interface) compatibility.

In effect, Cygwin is a POSIX \i{emulation} layer that allows programmers to compile POSIX-compatible source code into Windows executables with minimal changes.

This has several effects on programs that use the Cygwin emulation layer, as described in the following sections.

\H{cygwinfstabfile} Cygwin File System Permissions

\I{Access Control List}\I{rsync}By default, Cygwin programs will attempt to reproduce POSIX-style file \i{permissions} using Windows access control lists (ACLs). This can result in unexpected permission problems when running Cygwin-based file management tools such as \s{rsync}.

\I{fstab file}\I{noacl}To avoid this problem, the installer (see \k{installer}) configures the file systems in the \e{installpath}\c{\\fstab} file to use the \c{noacl} option for all directories.

Please see the following references in the Cygwin documentation for more information:

\b File Permissions - \W{https://cygwin.com/cygwin-ug-net/ntsec.html#ntsec-files}\cw{https://cygwin.com/cygwin-ug-net/ntsec.html#ntsec-files}

\b The Cygwin Mount Table - \W{https://cygwin.com/cygwin-ug-net/using.html#mount-table}\cw{https://cygwin.com/cygwin-ug-net/using.html#mount-table}

\H{cygwinaccountnames} Cygwin Account Names
\I{account names, Cygwin}\I{Cygwin account names}

Account names in Windows use the following format: [\e{authorityname}\c{\\}]\e{accountname} (where \e{authorityname} is a computer name or domain name). The authority name isn't used in all circumstances (such as with the \c{BUILTIN} and \c{NT AUTHORITY} authorities).

Cygwin programs use the \c{+} rather than the \c{\\} character to separate authority names from account names.

Cygwin's account naming rules are as follows:

\b Well-known and built-in accounts will be named as in Windows, without an authority name. Examples: \c{Administrators} or \c{SYSTEM}

\b If the computer \s{is not} a domain member, the authority name is not used. Example: \c{Administrator} (not \c{COMPUTERNAME+Administrator})

\b If the computer \s{is} a domain member, accounts from the computer's domain are used without an authority name. Example: \c{kendyer} (not \c{DOMAIN1+kendyer})

\b Accounts from other domains use the domain name as the authority name. Example: \c{DOMAIN2+lynndyer}

\b Local computer accounts of a domain member computer use the computer name as the authority. Example: \c{COMPUTERNAME+localuser}

See \W{https://cygwin.com/cygwin-ug-net/ntsec.html#ntsec-mapping}{the Cygwin documentation} for more details about how Cygwin maps between Windows and POSIX account names.

\I{Get-AccountName.ps1}The \s{Get\-AccountName.ps1} script outputs one or more account names in both Windows and Cygwin formats:

\b The script will output the Windows and Cygwin account names for the current account if you run it without parameters

\b The script will out the Windows and Cygwin account names for one or more accounts if you provide the account name(s) as a parameter (the script also accepts pipeline input)

Run the command \s{Get\-Help Get\-AccountName} for more information about the script.

\I{case-sensitive account names}\s{Note:} OpenSSH server versions older than 8.0 required that Cygwin account names be specified using \e{exact case}. This requirement was removed starting in OpenSSH version 8.0.

\H{posixpathnames} POSIX Path Names

\I{path names, POSIX}\I{POSIX path names}Cygwin programs use POSIX path names (such as \c{/etc/fstab}) rather than Windows path names (such as \c{C:\\Program Files\\CygSSH\\etc\\fstab}).

For example, the root directory (\c{/}) corresponds to \e{installpath} (e.g., \c{C:\\Program Files\\CygSSH}).

Windows drive letters (e.g., \c{C:}) are found in the \c{/cygdrive} directory (e.g., \c{/cygdrive/c} corresponds to \c{C:}).

\I{cygpath command}The \s{cygpath} command allows you to easily translate Windows path names into a POSIX path names and vice-versa. Use the \c{\-w} parameter to tell \s{cygpath} you want the Windows path.

\c Example Command               Example Output
\c ---------------------------------------------------------------
\c cygpath "C:\Program Files"    /cygdrive/c/Program Files
\c cygpath C:\Users\KenDyer      /cygdrive/c/Users/KenDyer
\c cygpath -w /                  C:\Program Files\CygSSH
\c cygpath -w /etc/fstab         C:\Program Files\CygSSH\etc\fstab

In the first example, note that the quotes are required since the path name contains spaces.

If you need to specify a path name that contains spaces on a Cygwin program's command line, it may be necessary, depending on the command, to \q{escape} the spaces in the path using the \c{\\} character (see \k{cygwinsshcommands} for an example).

\H{cygwinhome} The Cygwin Home Directory

\I{home directory}A user's \e{home directory} is the default path location for files owned by that user. By default, Cygwin maps the user's home directory to \c{/home/}\e{accountname} (see \k{posixpathnames} for more about POSIX path names).

The default can cause confusion, though, because it means that Cygwin and Windows have two separate home directory paths. For example, the Windows home directory for the \c{KenDyer} account might be \c{C:\\Users\\KenDyer} but the default Cygwin home directory would be something like \c{C:\\Program Files\\CygSSH\\home\\KenDyer}.

To avoid the confusion, the CygSSH package uses the \i\c{nsswitch.conf} file to set Cygwin's home directory to the same home directory that Windows uses. The file contains the following line:

\c db_home: /%H

The \c{%H} placeholder means \q{Windows home directory in POSIX format.}

See \W{https://cygwin.com/cygwin-ug-net/ntsec.html#ntsec-mapping-nsswitch}{the Cygwin documentation} for more details about the \c{nsswitch.conf} file.

\# ----------------------------------------------------------------------------
\# APPENDIX
\# ----------------------------------------------------------------------------

\A{chrootdirectory} The ChrootDirectory Setting

\I{ChrootDirectory setting}On a POSIX-compliant operating system (e.g., Linux), the OpenSSH \c{ChrootDirectory} setting uses the \i\c{chroot} system call to restrict an account's access to a specific path in the file system: The account cannot access any file or directory outside of that specific path. In POSIX terminology, this is sometimes referred to as a \e{\i{chroot jail}}.

The Cygwin emulation layer used by OpenSSH on Windows (see \k{cygwin}) has a limited implementation of \c{chroot} because the Windows operating system does not have a direct equivalent of this system call. Consequently, Cygwin's limited implementation of \c{chroot} is not a true security control because it can sometimes permit the account to \q{escape} from the \q{jail.} (It's important to understand that even if the account \q{escapes} from the \q{jail,} the account is still restricted by Windows security controls; it's just that the limited Cygwin \i{chroot jail} isn't enforced as an \e{additional} security control.)

Even though Cygwin's implementation \c{chroot} is not a true security control, we can still use the \c{ChrootDirectory} setting in \c{sshd_config} to restrict the file system view for an SFTP-only account (see \k{sftponly}).

Using the \c{ChrootDirectory} setting in \c{sshd_config} requires the following two items be in place:

\n \I{passwd file}\I{root user account}The \c{passwd} file in the \c{etc} directory must specify that the Windows \c{SYSTEM} account is user number \c{0} (this corresponds to the POSIX \c{root} user account)

\n \I{sshd account}\I{privsep account}The local \c{sshd} account (known as the \e{privsep account}) must exist, and it must be \s{enabled} (it must \e{not} be disabled as stated in the OpenSSH documentation)

These two items are taken care of automatically at installation time (they don't need to be configured manually).

\# ----------------------------------------------------------------------------
\# APPENDIX
\# ----------------------------------------------------------------------------

\A{usingrsync} Using rsync with SSH

\I{rsync}The \s{rsync} command is an efficient file and directory replication tool that supports replication over an SSH connection so that the data is encrypted in transit.

The syntax for replicating data to a remote computer using an SSH connection is as follows:

\c rsync options -e "ssh [sshoptions]" "source" "accountname@hostname:dest"
\e       iiiiiii          iiiiiiiiii    iiiiii   iiiiiiiiiii iiiiiiii iiii

Where:

\b \e{options} is one or more command line options for the \s{rsync} command

\b \e{sshoptions} is one or more command line options for the \s{ssh} command

\b \e{source} is the source path in POSIX format (see \k{posixpathnames}); do not use \c{\\} to escape spaces in the source path

\b \e{accountname} is the account name to connect with, in Cygwin format (see \k{cygwinaccountnames})

\b \e{hostname} is the remote computer name

\b \e{dest} is the destination path in POSIX format (see \k{posixpathnames}); escape spaces in the destination path using \c{\\} unless using \s{rsync}'s \s{\-s} option (recommended)

Example command 1:

\c rsync -lrstvz -e "ssh" "/cygdrive/c/Users/KenDyer/Backup Files/"
\c   "KenDyer@computer3:/cygdrive/c/Users/KenDyer/Backup Files"

(All on one line) This command replicates the \c{C:\\Users\\KenDyer\\Backup Files} directory to the same path on \c{computer3} using the \c{KenDyer} account.

Example command 2:

\c rsync -lrstvz -e "ssh -i /cygdrive/c/Users/filerepl/.ssh/ed25519"
\c   "/cygdrive/c/ProgramData/App Name/"
\c   "filerepl@server2:/cygdrive/c/ProgramData/App Name"

(All on one line) This command replicates the directory \c{C:\\Program Data\\App Name} to the computer \c{server2} using the \c{filerepl} account. Note the use of a private key file, specified as a POSIX path (see \k{posixpathnames}).

Note that the source path in the example commands uses a trailing \c{/} to prevent creating a new directory in the destination path.

See \k{documentationlinks} for a link to \s{rsync}'s documentation.

\# ----------------------------------------------------------------------------
\# APPENDIX
\# ----------------------------------------------------------------------------

\A{documentationlinks} Documentation Links
\I{documentation links}\I{links, documentation}

\I{OpenSSH}\s{OpenSSH} - \W{https://www.openssh.com/manual.html}{https://www.openssh.com/manual.html}

\I{Cygwin}\s{Cygwin} - \W{https://www.cygwin.com/cygwin-ug-net/cygwin-ug-net.html}{https://www.cygwin.com/cygwin-ug-net/cygwin-ug-net.html}

\I{rsync}\s{rsync} - \W{https://rsync.samba.org/documentation.html}{https://rsync.samba.org/documentation.html}

\I{Inno Setup}\s{Inno Setup} - \W{http://www.jrsoftware.org/ishelp/}{http://www.jrsoftware.org/ishelp/}

\# ----------------------------------------------------------------------------
\# APPENDIX
\# ----------------------------------------------------------------------------

\A{powershellscripts} Windows PowerShell Scripts

\I{PowerShell scripts}The following list describes the \i{Windows PowerShell scripts} provided by the CygSSH package.

\I{Edit-SSHKey.ps1}\s{Edit\-SSHKey.ps1} - Updates a private key file's comment or passphrase (see \k{editprivatekey})

\I{Get-AccountName.ps1}\s{Get\-AccountName.ps1} - Outputs an account's name in both Cygwin and Windows format (see \k{cygwinaccountnames})

\I{Get-SSHHostKeyFingerprint.ps1}\s{Get\-SSHHostKeyFingerprint.ps1} - Outputs SSH host key fingerprint(s) from one or more computer(s) (see \k{hostkeys})

\I{New-SSHKey.ps1}\s{New\-SSHKey.ps1} - Creates a key pair (see \k{createkeypair})

\I{Set-FstabConfig.ps1}\s{Set\-FstabConfig.ps1} - Used by the installer to create a default \c{fstab} file (see \k{cygwinfstabfile})

\I{Set-SSHGroup.ps1}\s{Set\-SSHGroup.ps1} - Used by the installer to create the local access group and update the \c{sshd_config} file (see \k{localaccessgroup})*

\I{Set-SSHHostKey.ps1}\s{Set\-SSHHostKey.ps1} - Used by the installer to create the OpenSSH server host keys (see \k{hostkeys})*

\I{Set-SSHService.ps1}\s{Set\-SSHService.ps1} - Used by the installer to install, start, stop, and uninstall the OpenSSH server service*

* Only installed when setup type is \s{full} (see \k{setuptype})

\s{Note:} Use the \s{Get\-Help} cmdlet to get online help information for any of the PowerShell scripts.

\# ----------------------------------------------------------------------------
\# APPENDIX
\# ----------------------------------------------------------------------------

\A{acknowledgments} Acknowledgments
\I{acknowledgments}

Special thanks to the authors of the following software packages for their generous contributions:

\s{Cygwin} - \W{https://www.cygwin.com/}{https://www.cygwin.com/}

\s{OpenSSH} - \W{https://www.openssh.com/}{https://www.openssh.com/}

\s{winpty} - \W{https://github.com/rprichard/winpty/}{https://github.com/rprichard/winpty/}

\s{rsync} - \W{https://rsync.samba.org/}{https://rsync.samba.org/}

\s{Inno Setup} - \W{http://www.jrsoftware.org/}{http://www.jrsoftware.org/}

\s{Halibut} - \W{https://www.chiark.greenend.org.uk/~sgtatham/halibut/}{https://www.chiark.greenend.org.uk/~sgtatham/halibut/}

\s{PathMgr.dll} - \W{https://github.com/Bill-Stewart/PathMgr/}{https://github.com/Bill-Stewart/PathMgr/}

\# ----------------------------------------------------------------------------
\# APPENDIX
\# ----------------------------------------------------------------------------

\A{licenses} License Agreements
\I{license agreements}

This package contains software from multiple sources:

\b \s{Cygwin} - \W{https://www.cygwin.com/licensing.html}{https://www.cygwin.com/licensing.html}

\b \s{OpenSSH} - \W{https://cvsweb.openbsd.org/src/usr.bin/ssh/LICENCE?rev=HEAD}{https://cvsweb.openbsd.org/src/usr.bin/ssh/LICENCE?rev=HEAD}

\b \s{rsync} - \W{https://rsync.samba.org/GPL.html}{https://rsync.samba.org/GPL.html}

\b \s{winpty} - \W{https://github.com/rprichard/winpty/blob/master/LICENSE}{https://github.com/rprichard/winpty/blob/master/LICENSE}

\b \s{PathMgr.dll} - \W{https://github.com/Bill-Stewart/PathMgr/}{https://github.com/Bill-Stewart/PathMgr/}

\b \s{UninsIS.dll} - \W{https://github.com/Bill-Stewart/UninsIS/}{https://github.com/Bill-Stewart/UninsIS/}

See \k{opensource} for source code availability for software components that require making the source code available.

\s{Windows PowerShell Script License}

In addition to the above, the package contains a set of Windows PowerShell scripts written by Bill Stewart that are used for installing and managing the software. The Windows PowerShell scripts are covered by the MIT license:

Copyright \copyright 2019-2024 by Bill Stewart.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

\# ----------------------------------------------------------------------------
\# APPENDIX
\# ----------------------------------------------------------------------------

\A{opensource} Open Source Source Code
\I{open source}
\I{source code}

Some of the software components used by the CygSSH package have a license that requires the agent (a person or organization) who distributes the software to provide the source code for the software being distributed.

To meet this requirement for the CygSSH package, a zip file archive of the source code for the included software components covered by this kind of license is available at the following URL:

\W{https://github.com/Bill-Stewart/CygSSH/tree/master/usr/src}{https://github.com/Bill-Stewart/CygSSH/tree/master/usr/src}

From that page, do the following:

\n Click the \s{History} button to view the history of the \s{src} directory.

\n Click the \s{View at this point in the history} button for the desired version to view the \s{src} directory for that version.

\n Click the \s{source.zip} file to download that version of the source code files.

The source code is generally of interest only to developers.

\# ----------------------------------------------------------------------------
\# APPENDIX
\# ----------------------------------------------------------------------------

\A{versionhistory} Version History
\I{release history}
\I{version history}

\s{9.7.0} (2024-05-08)

\b Updated to OpenSSH 9.7p1 and latest Cygwin packages.

\b Added \s{Get\-SSHHostKeyFingerprint.ps1} script.

\s{9.4.1} (2023-08-10)

\b Updated to OpenSSH 9.4p1-1 and latest Cygwin packages.

\s{9.3.2} (2023-07-27)

\b Updated to OpenSSH 9.3-p2-1 and latest Cygwin packages.

\b Corrected installer bug: PathMgr.dll file not installed in per-user installation.

\b Corrected installer bug: cygserver files installed in per-user installation.

\s{9.3} (2023-03-28)

\b Installer version synchronized with OpenSSH version.

\s{9.2.3.0} (2023-02-04)

\b Updated to OpenSSH 9.2 and latest packages (Cygwin, etc.).

\s{3.0} (2022-12-06)

\b Updated to OpenSSH 9.1, Cygwin 3.4, and rsync 3.2.7.

\b Removed 32-bit and downlevel OS support.

\b Removed \s{downloadsource} task.

\b Minor tweaks.

\s{2.2} (2022-08-11)

\b Updated to OpenSSH 9.0.

\b Updated Cygwin and Cygwin packages.

\s{2.2} (2022-03-29)

\b Updated to OpenSSH 8.9.

\b Updated Cygwin packages.

\b Uninstall fix: Only delete \s{PathMgr.dll} when package is uninstalled.

\s{2.1} (2022-01-20)

\b Updated Cygwin packages.

\b Fix: Avoid multiple downloads of source code if \s{downloadsource} task is selected and user navigates backward then forward through setup wizard.

\s{2.0} (2021-11-01)

\b Updated to OpenSSH 8.8.

\b Updated Cygwin packages.

\b Added \s{downloadsource} installer task to download the source code during the installation process (see \k{setuptasks}).

\b Added optional \s{resetconfig} installer task to reset the \c{ssh_config} and/or \c{sshd_config} files.

\b \I{/FORCEUNINSTALL parameter}Added support for \s{/FORCEUNINSTALL} installer command-line parameter (see \k{installer} and \k{downgrade}).

\b Updated installer to use more secure permissions for the \c{usr} and \c{tmp} directories.

\b Added elevation check to \s{Set\-FstabConfig.ps1} and \s{Set\-SSHHostKey.ps1}.

\b Changed permission update commands to use the Windows \s{icacls} command.

\b Moved automatic executable detection to a more appropriate stage in the install process.

\s{1.7} (2021-03-12)

\b Updated Cygwin packages.

\b Installer behavior change: If adding to the Path is selected, the installer will add to the beginning of the Path rather than the end. This change was made because newer versions of Windows have OpenSSH client utilities in the system Path by default that can cause compatibility problems with the Cygwin programs. (Note that this change will not be effective if installing in non-administrative installation mode because the directories in the system Path always appear before the current user Path.)

\b Removed clickable hyperlinks in RTF documents displayed by the installer to prevent accidental launching of an elevated browser.

\s{1.6} (2021-03-05)

\b Updated to OpenSSH 8.5 and mintty 3.4.6.

\s{1.6} (2021-02-04)

\b Dropped support for Windows Vista/Windows Server 2008 to increase the security of the installer.

\b Updated Cygwin packages.

\b Updated installer to use \s{PathMgr.dll} for system/user Path management.

\b Updated PowerShell scripts to avoid informational messages from PowerShell parsers and to improve readibility.

\b Fixed typo in \s{New\-SSHKey.ps1} script that caused an error message "Bits has bad value 0 (too small)".

\b Updated documentation to mention addition of Windows firewall rule addition and fixed some typos.

\s{1.5}

\b Added missing DLLs that broke rsync.

\s{1.4}

\b Updated OpenSSH to version 8.4.

\b Updated rsync to version 3.2.3.

\b Updated Cygwin and associated packages.

\b Added default \c{nanorc} configuration file.

\s{1.3}

\b Updated Cygwin and associated packages.

\b Updated runposh tool to 1.3 (compile using FPC 3.2.0).

\b Installer tweak: Clean \c{\\usr\\share} and \c{\\usr\\src} directories when installing.

\b Package standardization: Installed application version matches installer version.

\s{1.2}

\b Updated OpenSSH to version 8.3.

\b Added \s{mkgroup}, \s{mkpasswd}, and \s{ssh-pageant} tools.

\b Updated \s{runposh} tool to version 1.2.

\b Added default \c{cygserver.conf} and \c{virc} configuration files.

\s{1.1}

\b \I{CYGWIN environment variable}\I{disable_pcon}Updated OpenSSH service not to use the Windows \i{ConPTY} API calls in newer versions of Windows by setting the \c{disable_pcon} setting in the \c{CYGWIN} environment variable. (The CygSSH package doesn't need the ConPTY support since it uses \s{winpty}.) See \W{https://cygwin.com/cygwin-ug-net/using-cygwinenv.html}{https://cygwin.com/cygwin-ug-net/using-cygwinenv.html} for details.

\b \I{mintty}Added recommendation to run \s{ssh} and \s{sftp} using \s{mintty}.

\b Updated \s{runposh} tool to version 1.1.

\s{1.0}

\b Initial version.

\# ----------------------------------------------------------------------------
\# INDEX MODIFICATIONS
\# ----------------------------------------------------------------------------

\IM{.ppk file} \c{.ppk} file
\IM{.pub file} \c{.pub} file
\IM{.ssh directory} \c{.ssh} directory
\IM{/CLOSEAPPLICATIONS parameter} \c{/CLOSEAPPLICATIONS} parameter
\IM{/CURRENTUSER parameter} \c{/CURRENTUSER} parameter
\IM{/FORCEUNINSTALL parameter} \c{/FORCEUNINSTALL} parameter
\IM{/SILENT parameter} \c{/SILENT} parameter
\IM{/SUPPRESSMSGBOXES parameter} \c{/SUPPRESSMSGBOXES} parameter
\IM{Access Control List} Access Control List (ACL)
\IM{AllowGroups setting} \c{AllowGroups} setting
\IM{AllowTcpForwarding setting} \c{AllowTcpForwarding} setting
\IM{AuthenticationMethods} \c{AuthenticationMethods} setting
\IM{authorized_keys file} \c{authorized_keys} file
\IM{chroot jail} \c{chroot} jail
\IM{chroot jail} jail (\c{chroot})
\IM{ChrootDirectory setting} \c{ChrootDirectory} setting
\IM{cygdrive directory} \c{cygdrive} directory (SFTP-only)
\IM{CYGWIN environment variable} \c{CYGWIN} environment variable
\IM{dev directory} \c{dev} directory (SFTP-only)
\IM{disable_pcon} \c{disable_pcon}
\IM{ForceCommand setting} \c{ForceCommand} setting
\IM{fstab file} \c{fstab} file
\IM{Group Policy} Group Policy (GPO)
\IM{installpath} \e{installpath}
\IM{interactive shell} interactive shell
\IM{interactive shell} shell (interactive)
\IM{known_hosts} \c{known_hosts} file
\IM{Match User setting} \c{Match User} setting
\IM{modifypath installer task} \c{modifypath} installer task
\IM{modifypath installer task} path (environment variable)
\IM{noacl} \c{noacl} option (\c{fstab} file)
\IM{nsswitch.conf} \c{nsswitch.conf} file
\IM{passwd file} \c{passwd} file
\IM{root user account} \c{root} user account
\IM{SSH Users group} \c{SSH Users} (local access group)
\IM{ssh_config} \c{ssh_config} file
\IM{sshd account} \c{sshd} account
\IM{sshd_config} \c{sshd_config} file
\IM{startservice installer task} \c{startservice} installer task
